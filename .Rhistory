xlim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi1 = x[[i]][,1]
xlim = c(pmin(xlim[1], min(xi1)),
pmax(xlim[2], max(xi1)))
}
}
if (missing(ylim)) {
ylim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi2 = x[[i]][,2]
ylim = c(pmin(ylim[1], min(xi2)),
pmax(ylim[2], max(xi2)))
}
}
# need at least 2 colors
mycol = grDevices::hcl.colors(pmax(2, length(x)), palette = palette)
plot(xlim, ylim, xlim = xlim, ylim = ylim, type = "n", ...)
for (i in seq_along(x)) {
xi = x[[i]]
points(x[1, 2], xi[1, 2], col = mycol[i], ...)
for (j in seq_len(min(ncycles, nrow(xi)))) {
lines(c(xi[j, 1], xi[j+1, 1]), c(xi[j, 2], x[j, 2]),  col = mycol[i], ...)
lines(c(xi[j + 1, 1], xi[j + 1, 1]), c(xi[j, 2], x[j + 1, 2]), col = mycol[i], ...)
}
}
}
if(!is.null(x0))
{
x <- rbind(x0, x)
}
if(!add)
{
plot(x, type = "n", ...)
}
points(x[1, 1], x[1, 2], ...)
for(i in 1:(nrow(x) - 1))
{
lines(c(x[i, 1], x[i+1, 1]), c(x[i, 2], x[i, 2]),  ...)
lines(c(x[i+1, 1], x[i+1, 1]), c(x[i, 2], x[i + 1, 2]),  ...)
}
}
#create a function to draw path from two-dimensional gibbs sample
#takes x0, a vector of length 2 containing the starting point,
#x, an nx2 matrix containing the posterior simulations,
#add, whether this path should be added to a current plot
#..., additional parameter to pass to the plotting functions
plot_mcmc_path <- function(x, ncycles = 10, palette = "RdYlBu", xlim, ylim,
xlab = "parm 1", ylab = "parm 2", ...) {
if (!is.list(x)) {
x = list(x)
}
for (i in seq_along(x)) {
if (ncol(x[[i]]) != 2 | is.null(ncol(x[[i]]))) {
stop("x must have two columns (or be a list of two column matrix-like objects")
}
}
# get sensible x and y limits
if (missing(xlim)) {
xlim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi1 = x[[i]][,1]
xlim = c(pmin(xlim[1], min(xi1)),
pmax(xlim[2], max(xi1)))
}
}
if (missing(ylim)) {
ylim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi2 = x[[i]][,2]
ylim = c(pmin(ylim[1], min(xi2)),
pmax(ylim[2], max(xi2)))
}
}
# need at least 2 colors
mycol = grDevices::hcl.colors(pmax(2, length(x)), palette = palette)
plot(xlim, ylim, xlim = xlim, ylim = ylim, type = "n", ...)
for (i in seq_along(x)) {
xi = x[[i]]
points(x[1, 2], xi[1, 2], col = mycol[i], ...)
for (j in seq_len(min(ncycles, nrow(xi)))) {
lines(c(xi[j, 1], xi[j+1, 1]), c(xi[j, 2], x[j, 2]),  col = mycol[i], ...)
lines(c(xi[j + 1, 1], xi[j + 1, 1]), c(xi[j, 2], x[j + 1, 2]), col = mycol[i], ...)
}
}
}
plot_mcmc_path(cbind(mupost, sigmasqpost),
xlab = expression(mu), ylab = expression(sigma^2))
#create a function to draw path from two-dimensional gibbs sample
#takes x0, a vector of length 2 containing the starting point,
#x, an nx2 matrix containing the posterior simulations,
#add, whether this path should be added to a current plot
#..., additional parameter to pass to the plotting functions
plot_mcmc_path <- function(x, ncycles = 10, palette = "RdYlBu", xlim, ylim,
xlab = "parm 1", ylab = "parm 2", ...) {
if (!is.list(x)) {
x = list(x)
}
for (i in seq_along(x)) {
if (ncol(x[[i]]) != 2 | is.null(ncol(x[[i]]))) {
stop("x must have two columns (or be a list of two column matrix-like objects")
}
}
# get sensible x and y limits
if (missing(xlim)) {
xlim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi1 = x[[i]][,1]
xlim = c(pmin(xlim[1], min(xi1)),
pmax(xlim[2], max(xi1)))
}
}
if (missing(ylim)) {
ylim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi2 = x[[i]][,2]
ylim = c(pmin(ylim[1], min(xi2)),
pmax(ylim[2], max(xi2)))
}
}
# need at least 2 colors
mycol = grDevices::hcl.colors(pmax(2, length(x)), palette = palette)
plot(xlim, ylim, xlim = xlim, ylim = ylim, type = "n", ...)
for (i in seq_along(x)) {
xi = x[[i]]
points(xi[1, 1], xi[1, 2], col = mycol[i], ...)
for (j in seq_len(min(ncycles, nrow(xi)))) {
lines(c(xi[j, 1], xi[j+1, 1]), c(xi[j, 2], x[j, 2]),  col = mycol[i], ...)
lines(c(xi[j + 1, 1], xi[j + 1, 1]), c(xi[j, 2], x[j + 1, 2]), col = mycol[i], ...)
}
}
}
plot_mcmc_path(cbind(mupost, sigmasqpost),
xlab = expression(mu), ylab = expression(sigma^2))
#create a function to draw path from two-dimensional gibbs sample
#takes x0, a vector of length 2 containing the starting point,
#x, an nx2 matrix containing the posterior simulations,
#add, whether this path should be added to a current plot
#..., additional parameter to pass to the plotting functions
plot_mcmc_path <- function(x, ncycles = 10, palette = "RdYlBu", xlim, ylim,
xlab = "parm 1", ylab = "parm 2", ...) {
if (!is.list(x)) {
x = list(x)
}
for (i in seq_along(x)) {
if (ncol(x[[i]]) != 2 | is.null(ncol(x[[i]]))) {
stop("x must have two columns (or be a list of two column matrix-like objects")
}
}
# get sensible x and y limits
if (missing(xlim)) {
xlim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi1 = x[[i]][,1]
xlim = c(pmin(xlim[1], min(xi1)),
pmax(xlim[2], max(xi1)))
}
}
if (missing(ylim)) {
ylim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi2 = x[[i]][,2]
ylim = c(pmin(ylim[1], min(xi2)),
pmax(ylim[2], max(xi2)))
}
}
# need at least 2 colors
mycol = grDevices::hcl.colors(pmax(2, length(x)), palette = palette)
plot(xlim, ylim, xlim = xlim, ylim = ylim, type = "n", ...)
for (i in seq_along(x)) {
xi = x[[i]]
points(xi[1, 1], xi[1, 2], col = mycol[i], ...)
for (j in seq_len(min(ncycles, nrow(xi)))) {
lines(c(xi[j, 1], xi[j+1, 1]), c(xi[j, 2], xi[j, 2]),  col = mycol[i], ...)
lines(c(xi[j + 1, 1], xi[j + 1, 1]), c(xi[j, 2], xi[j + 1, 2]), col = mycol[i], ...)
}
}
}
plot_mcmc_path(cbind(mupost, sigmasqpost),
xlab = expression(mu), ylab = expression(sigma^2))
source('~/OneDrive - The University of Colorado Denver/GitHub/bayesutils/R/plot_mcmc_path.R', echo=TRUE)
plot_mcmc_path(cbind(mupost, sigmasqpost),
xlab = expression(mu), ylab = expression(sigma^2))
summary(x)
summary(cbind(mupost, sigmasqpost))
#create a function to draw path from two-dimensional gibbs sample
#takes x0, a vector of length 2 containing the starting point,
#x, an nx2 matrix containing the posterior simulations,
#add, whether this path should be added to a current plot
#..., additional parameter to pass to the plotting functions
plot_mcmc_path <- function(x, ncycles = 10, palette = "RdYlBu", xlim, ylim,
xlab = "parm 1", ylab = "parm 2", ...) {
if (!is.list(x)) {
x = list(x)
}
for (i in seq_along(x)) {
if (ncol(x[[i]]) != 2 | is.null(ncol(x[[i]]))) {
stop("x must have two columns (or be a list of two column matrix-like objects")
}
}
# get sensible x and y limits
if (missing(xlim)) {
xlim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi1 = x[[i]][seq_len(ncycles),1]
xlim = c(pmin(xlim[1], min(xi1)),
pmax(xlim[2], max(xi1)))
}
}
if (missing(ylim)) {
ylim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi2 = x[[i]][seq_len(nycles),2]
ylim = c(pmin(ylim[1], min(xi2)),
pmax(ylim[2], max(xi2)))
}
}
# need at least 2 colors
mycol = grDevices::hcl.colors(pmax(2, length(x)), palette = palette)
plot(xlim, ylim, xlim = xlim, ylim = ylim, xlab = xlab,
ylab = ylab, type = "n", ...)
for (i in seq_along(x)) {
xi = x[[i]]
points(xi[1, 1], xi[1, 2], col = mycol[i], ...)
for (j in seq_len(min(ncycles, nrow(xi)))) {
lines(c(xi[j, 1], xi[j+1, 1]), c(xi[j, 2], xi[j, 2]),  col = mycol[i], ...)
lines(c(xi[j + 1, 1], xi[j + 1, 1]), c(xi[j, 2], xi[j + 1, 2]), col = mycol[i], ...)
}
}
}
plot_mcmc_path(cbind(mupost, sigmasqpost),
xlab = expression(mu), ylab = expression(sigma^2))
#create a function to draw path from two-dimensional gibbs sample
#takes x0, a vector of length 2 containing the starting point,
#x, an nx2 matrix containing the posterior simulations,
#add, whether this path should be added to a current plot
#..., additional parameter to pass to the plotting functions
plot_mcmc_path <- function(x, ncycles = 10, palette = "RdYlBu", xlim, ylim,
xlab = "parm 1", ylab = "parm 2", ...) {
if (!is.list(x)) {
x = list(x)
}
for (i in seq_along(x)) {
if (ncol(x[[i]]) != 2 | is.null(ncol(x[[i]]))) {
stop("x must have two columns (or be a list of two column matrix-like objects")
}
}
# get sensible x and y limits
if (missing(xlim)) {
xlim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi1 = x[[i]][seq_len(ncycles),1]
xlim = c(pmin(xlim[1], min(xi1)),
pmax(xlim[2], max(xi1)))
}
}
if (missing(ylim)) {
ylim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi2 = x[[i]][seq_len(ncycles),2]
ylim = c(pmin(ylim[1], min(xi2)),
pmax(ylim[2], max(xi2)))
}
}
# need at least 2 colors
mycol = grDevices::hcl.colors(pmax(2, length(x)), palette = palette)
plot(xlim, ylim, xlim = xlim, ylim = ylim, xlab = xlab,
ylab = ylab, type = "n", ...)
for (i in seq_along(x)) {
xi = x[[i]]
points(xi[1, 1], xi[1, 2], col = mycol[i], ...)
for (j in seq_len(min(ncycles, nrow(xi)))) {
lines(c(xi[j, 1], xi[j+1, 1]), c(xi[j, 2], xi[j, 2]),  col = mycol[i], ...)
lines(c(xi[j + 1, 1], xi[j + 1, 1]), c(xi[j, 2], xi[j + 1, 2]), col = mycol[i], ...)
}
}
}
plot_mcmc_path(cbind(mupost, sigmasqpost),
xlab = expression(mu), ylab = expression(sigma^2))
?hcl.colors
x1 = cbind(rnorm(3), rchisq(3))
x2 = cbind(rnorm(3), rchisq(3))
x = list(x1, x2)
plot_mcmc_path(x)
x1 = cbind(rnorm(3), rchisq(3, df = 1))
x2 = cbind(rnorm(3), rchisq(3, df = 1))
x = list(x1, x2)
plot_mcmc_path(x)
#' Plot path of MCMC chains
#'
#' @param x A matrix with 2 columns or a list of 2 column matrices
#' @param ncycles The number of cycles to plot
#' @inheritParams grDevices::Palettes
#' @param xlim x-axis limits
#' @param ylim y-axis limits
#' @param xlab x-axis label
#' @param ylab y-axis label
#' @param type Type of path to plot. \code{"step"} moves horizontally
#' and vertically for each step within the MCMC cycles. \code{"cycle"} plots
#' the movements for each completed MCMC cycle.
#' @param ... Additional parameters for the plot function.
#'
#' @return A plot.
#' @export
#'
#' @examples
#' x1 = cbind(rnorm(3), rchisq(3, df = 1))
#' x2 = cbind(rnorm(3), rchisq(3, df = 1))
#' x = list(x1, x2)
#' plot_mcmc_path(x)
plot_mcmc_path <- function(x, ncycles = 10, palette = "RdYlBu", xlim, ylim,
xlab = "parm 1", ylab = "parm 2",
type = "step", ...) {
type = match.arg(type, c("step", "cycle"))
if (!is.list(x)) {
x = list(x)
}
for (i in seq_along(x)) {
if (ncol(x[[i]]) != 2 | is.null(ncol(x[[i]]))) {
stop("x must have two columns (or be a list of two column matrix-like objects")
}
}
# get sensible x and y limits
if (missing(xlim)) {
xlim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi1 = x[[i]][,1]
xi1 = xi1[seq_len(pmin(ncycles, length(xi1)))]
xlim = c(pmin(xlim[1], min(xi1)),
pmax(xlim[2], max(xi1)))
}
}
if (missing(ylim)) {
ylim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi2 = x[[i]][,2]
xi2 = xi2[seq_len(pmin(ncycles, length(xi2)))]
ylim = c(pmin(ylim[1], min(xi2)),
pmax(ylim[2], max(xi2)))
}
}
# need at least 2 colors
mycol = grDevices::hcl.colors(pmax(2, length(x)), palette = palette)
plot(xlim, ylim, xlim = xlim, ylim = ylim, xlab = xlab,
ylab = ylab, type = "n", ...)
for (i in seq_along(x)) {
xi = x[[i]]
points(xi[1, 1], xi[1, 2], col = mycol[i], ...)
if (type == "step") {
for (j in seq_len(min(ncycles, nrow(xi)))) {
lines(c(xi[j, 1], xi[j+1, 1]), c(xi[j, 2], xi[j, 2]),  col = mycol[i], ...)
lines(c(xi[j + 1, 1], xi[j + 1, 1]), c(xi[j, 2], xi[j + 1, 2]), col = mycol[i], ...)
}
} else if (type == "cycle") {
lines(xi[,1], x[i, 2], col = mycol[i], )
}
}
}
x1 = cbind(rnorm(3), rchisq(3, df = 1))
x2 = cbind(rnorm(3), rchisq(3, df = 1))
x = list(x1, x2)
plot_mcmc_path(x)
#' Plot path of MCMC chains
#'
#' @param x A matrix with 2 columns or a list of 2 column matrices
#' @param ncycles The number of cycles to plot
#' @inheritParams grDevices::Palettes
#' @param xlim x-axis limits
#' @param ylim y-axis limits
#' @param xlab x-axis label
#' @param ylab y-axis label
#' @param type Type of path to plot. \code{"step"} moves horizontally
#' and vertically for each step within the MCMC cycles. \code{"cycle"} plots
#' the movements for each completed MCMC cycle.
#' @param ... Additional parameters for the plot function.
#'
#' @return A plot.
#' @export
#'
#' @examples
#' x1 = cbind(rnorm(3), rchisq(3, df = 1))
#' x2 = cbind(rnorm(3), rchisq(3, df = 1))
#' x = list(x1, x2)
#' plot_mcmc_path(x)
plot_mcmc_path <- function(x, ncycles = 10, palette = "RdYlBu", xlim, ylim,
xlab = "parm 1", ylab = "parm 2",
type = "step", ...) {
type = match.arg(type, c("step", "cycle"))
if (!is.list(x)) {
x = list(x)
}
for (i in seq_along(x)) {
if (ncol(x[[i]]) != 2 | is.null(ncol(x[[i]]))) {
stop("x must have two columns (or be a list of two column matrix-like objects")
}
}
# get sensible x and y limits
if (missing(xlim)) {
xlim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi1 = x[[i]][,1]
xi1 = xi1[seq_len(pmin(ncycles, length(xi1)))]
xlim = c(pmin(xlim[1], min(xi1)),
pmax(xlim[2], max(xi1)))
}
}
if (missing(ylim)) {
ylim = c(Inf, -Inf)
for (i in seq_along(x)) {
xi2 = x[[i]][,2]
xi2 = xi2[seq_len(pmin(ncycles, length(xi2)))]
ylim = c(pmin(ylim[1], min(xi2)),
pmax(ylim[2], max(xi2)))
}
}
# need at least 2 colors
mycol = grDevices::hcl.colors(pmax(2, length(x)), palette = palette)
# plot empty canvas
plot(xlim, ylim, xlim = xlim, ylim = ylim, xlab = xlab,
ylab = ylab, type = "n", ...)
# plot steps or cycles
# make sure there are enough rows in x to plot
for (i in seq_along(x)) {
xi = x[[i]]
points(xi[1, 1], xi[1, 2], col = mycol[i], ...)
if (type == "step") {
for (j in seq_len(min(ncycles, nrow(xi) - 1))) {
lines(c(xi[j, 1], xi[j+1, 1]), c(xi[j, 2], xi[j, 2]),  col = mycol[i], ...)
lines(c(xi[j + 1, 1], xi[j + 1, 1]), c(xi[j, 2], xi[j + 1, 2]), col = mycol[i], ...)
}
} else if (type == "cycle") {
nx = seq_len(min(ncycles, nrow(xi)))
lines(xi[nx, 1], xi[nx,2], col = mycol[i], )
}
}
}
plot_mcmc_path(cbind(mupost, sigmasqpost),
xlab = expression(mu), ylab = expression(sigma^2))
x1 = cbind(rnorm(3), rchisq(3, df = 1))
x2 = cbind(rnorm(3), rchisq(3, df = 1))
x = list(x1, x2)
plot_mcmc_path(x)
plot_mcmc_path(x, type = "cycle")
plot_mcmc_path(cbind(mupost, sigmasqpost),
xlab = expression(mu), ylab = expression(sigma^2))
plot_mcmc_path(cbind(mupost, sigmasqpost), ncycles = 100,
xlab = expression(mu), ylab = expression(sigma^2))
plot_mcmc_path(cbind(mupost, sigmasqpost), ncycles = 100, type = "cycle",
xlab = expression(mu), ylab = expression(sigma^2))
palette(6, "RdYlBu")
hcl.colors(6, "RdYlBu")
?code
?plot
x1 = cbind(rnorm(3), rchisq(3, df = 1))
x2 = cbind(rnorm(3), rchisq(3, df = 1))
x = list(x1, x2)
plot_mcmc_path(x)
plot_mcmc_path(x, type = "cycle", pch = 20)
bank_salary <- read.table("~/OneDrive - The University of Colorado Denver/Teaching/Math7393/Homework/Hw07 - Normal-Error-Regression/BankSalaryData.csv",
header = TRUE, sep = ",")
getwd()
save(bank_salary, file = "bank_salary.rda", compress = "xz")
naems(bank_salary)
names(bank_salary)
bank_salary$Sex
install.packages("Sleuth3")
bank_salary$BegSal
devtools::install_github("jfrench/bayes_utils")
devtools::install_github("jfrench/bayesutils")
library(bayesutils)
data(bank_salary)
bank_salary
names(bank_salary) = c("bsalary", "male", "education", "experience", "time")
save(bank_salary, file = "bank_salary.rda", compress = "xz")
?grDevices::palette
str(diamonds_simple)
load("diamonds_simple.rda")
load("~/diamonds_simple.rda")
load("diamonds_simple.rda")
str(diamonds_simple)
diamonds_simple$inclusions <- as.factor(diamonds_simple$inclusions)
str(diamonds_simple)
save(diamonds_simple, file = "diamonds_simple.rda", compress = "xz")
devtools::load_all(".")
?diamonds_simple
devtools::load_all(".")
?diamonds_simple
devtools::load_all(".")
?diamonds_simple
summary(diamonds_simple)
ggplot(diamonds_simple) + geom_point(aes(x = carat, y = price, col = inclusions))
ggplot(diamonds_simple) + geom_point(aes(x = carat, y = price, col = inclusions))
library(ggplot2)
ggplot(diamonds_simple) + geom_point(aes(x = carat, y = price, col = inclusions))
ggplot(diamonds_simple) + geom_point(aes(x = carat, y = price, col = clarity))
diamonds_simple$inclusions = factor(ifelse(diamonds_simple$clarity == "I1" |
diamonds_simple$clarity == "S1" |
diamonds_simple$clarity == "S2", # |
# diamonds_simple$clarity == "VS1" |
# diamonds_simple$clarity == "VS2",
"noticeable", "minor"))
save(diamonds_simple, file = "diamonds_simple.rda", compress = "xz")
ggplot(diamonds_simple) + geom_point(aes(x = carat, y = price, col = clarity))
ggplot(diamonds_simple) + geom_point(aes(x = carat, y = price, col = inclusions))
devtools::load_all(".")
?diamonds_simple
load("covid_dec4.rda")
load("./data/covid_dec4.rda")
str(covid_dec4)
names(covid_dec4) = c("state_name", "state_abb", "deaths", "population", "income", "hs", "bs")
save(covid_dec4, file = "./data/covid.dec4.rda", compress = "xz")
save(covid_dec4, file = "./data/covid_dec4.rda", compress = "xz")
