if (!log) {
stats::dgamma(1/x, shape = shape, scale = scale, log = log)/x^2
} else {
stats::dgamma(1/x, shape = shape, scale = scale, log = log) - 2 * log(x)
}
}
# tests
x = runif(50, 0, 10)
shape = runif(50, 0, 10)
scale = runif(50, 0, 10)
rate_da = invgamma::dinvgamma(x, shape, rate = 1/scale)
rate_db = dinvgamma(x, shape, rate = 1/scale)
all.equal(rate_da, rate_db)
scale_da = invgamma::dinvgamma(x, shape, scale = scale)
scale_db = dinvgamma(x, shape, scale = scale)
all.equal(scale_da, scale_db)
logscale_da = invgamma::dinvgamma(x, shape, scale = scale, log = TRUE)
logscale_db = dinvgamma(x, shape, scale = scale, log = TRUE)
all.equal(logscale_da, logscale_db)
lograte_da = invgamma::dinvgamma(x, shape, rate = 1/scale, log = TRUE)
lograte_db = dinvgamma(x, shape, rate = 1/scale, log = TRUE)
all.equal(lograte_da, lograte_db)
?expect_equal
# tests
x = runif(50, 0, 10)
shape = runif(50, 0, 10)
scale = runif(50, 0, 10)
# test rate argument works
rate_da = invgamma::dinvgamma(x, shape, rate = 1/scale)
rate_db = dinvgamma(x, shape, rate = 1/scale)
# test scale argument works
scale_da = invgamma::dinvgamma(x, shape, scale = scale)
scale_db = dinvgamma(x, shape, scale = scale)
# test log argument works for rate
lograte_da = invgamma::dinvgamma(x, shape, rate = 1/scale, log = TRUE)
lograte_db = dinvgamma(x, shape, rate = 1/scale, log = TRUE)
# test log argument works for scale
logscale_da = invgamma::dinvgamma(x, shape, scale = scale, log = TRUE)
logscale_db = dinvgamma(x, shape, scale = scale, log = TRUE)
test_that("dinvgamma is correct", {
expect_true(all.equal(rate_da, rate_db))
expect_true(all.equal(scale_da, scale_db))
expect_true(all.equal(lograte_da, lograte_db))
expect_true(all.equal(logscale_da, logscale_db))
})
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale)
rate_qb = qinvgamma(p, shape, rate = 1/scale)
all.equal(rate_qa, rate_qb)
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale)
rate_qb = qinvgamma(p, shape, rate = 1/scale)
all.equal(rate_qa, rate_qb)
source('~/OneDrive - The University of Colorado Denver/GitHub/bayesutils/R/InvGammaDist.R', echo=TRUE)
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale)
rate_qb = qinvgamma(p, shape, rate = 1/scale)
all.equal(rate_qa, rate_qb)
scale_qa = invgamma::qinvgamma(p, shape, scale = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
all.equal(scale_qa, scale_qb)
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale)
rate_qb = qinvgamma(p, shape, rate = 1/scale)
all.equal(rate_qa, rate_qb)
scale_qa = invgamma::qinvgamma(p, shape, scale = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
all.equal(scale_qa, scale_qb)
lograte_qa = invgamma::qinvgamma(p, shape, rate = 1/scale, log = TRUE)
lograte_qb = qinvgamma(p, shape, rate = 1/scale, log = TRUE)
all.equal(lograte_qa, lograte_qb)
logscale_qa = invgamma::qinvgamma(p, shape, scale = scale, log = TRUE)
logscale_qb = qinvgamma(p, shape, scale = scale, log = TRUE)
all.equal(logscale_qa, logscale_qb)
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale)
rate_qb = qinvgamma(p, shape, rate = 1/scale)
all.equal(rate_qa, rate_qb)
scale_qa = invgamma::qinvgamma(p, shape, scale = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
all.equal(scale_qa, scale_qb)
logp = exp(p)
logp_rate_qa = invgamma::qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
logp_rate_qb = qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
all.equal(logp_rate_qa, logp_ rate_qb)
logscale_qa = invgamma::qinvgamma(p, shape, scale = scale, log.p = TRUE)
logscale_qb = qinvgamma(p, shape, scale = scale, log.p = TRUE)
all.equal(logscale_qa, logscale_qb)
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale)
rate_qb = qinvgamma(p, shape, rate = 1/scale)
all.equal(rate_qa, rate_qb)
scale_qa = invgamma::qinvgamma(p, shape, scale = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
all.equal(scale_qa, scale_qb)
logp = exp(p)
logp_rate_qa = invgamma::qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
logp_rate_qb = qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
all.equal(logp_rate_qa, logp_ rate_qb)
logscale_qa = invgamma::qinvgamma(logp, shape, scale = scale, log.p = TRUE)
logscale_qb = qinvgamma(logp, shape, scale = scale, log.p = TRUE)
all.equal(logscale_qa, logscale_qb)
all.equal(logp_rate_qa, logp_rate_qb)
?qinvgamma
?qgamma
ut_rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
ut_rate_qb = qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
all.equal(ut_rate_qa, ut_rate_qb)
ut_scale_qa = invgamma::qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_scale_qb = qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
all.equal(ut_scale_qa, ut_scale_qb)
expect_equal(rate_qa, rate_qb)
expect_equal(scale_qa, scale_qb)
expect_equal(rate_qa, rate_qb)
expect_equal(scale_qa, scale_qb)
expect_equal(logp_rate_qa, logp_rate_qb)
expect_equal(logp_scale_qa, logp_scale_qb)
logp_scale_qa = invgamma::qinvgamma(logp, shape, scale = scale, log.p = TRUE)
logp_scale_qb = qinvgamma(logp, shape, scale = scale, log.p = TRUE)
ut_rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
ut_rate_qb = qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
ut_scale_qa = invgamma::qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_scale_qb = qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
expect_equal(rate_qa, rate_qb)
expect_equal(scale_qa, scale_qb)
expect_equal(logp_rate_qa, logp_rate_qb)
expect_equal(logp_scale_qa, logp_scale_qb)
expect_equal(ut_rate_qa, ut_rate_qb)
expect_equal(ut_scale_qa, ut_scale_qb)
# tests
x = runif(50, 0, 10)
shape = runif(50, 0, 10)
scale = runif(50, 0, 10)
# test rate argument works
rate_da = invgamma::dinvgamma(x, shape, rate = 1/scale)
rate_db = dinvgamma(x, shape, rate = 1/scale)
# test scale argument works
scale_da = invgamma::dinvgamma(x, shape, scale = scale)
scale_db = dinvgamma(x, shape, scale = scale)
# test log argument works for rate
lograte_da = invgamma::dinvgamma(x, shape, rate = 1/scale, log = TRUE)
lograte_db = dinvgamma(x, shape, rate = 1/scale, log = TRUE)
# test log argument works for scale
logscale_da = invgamma::dinvgamma(x, shape, scale = scale, log = TRUE)
logscale_db = dinvgamma(x, shape, scale = scale, log = TRUE)
test_that("dinvgamma is correct", {
expect_true(all.equal(rate_da, rate_db))
expect_true(all.equal(scale_da, scale_db))
expect_true(all.equal(lograte_da, lograte_db))
expect_true(all.equal(logscale_da, logscale_db))
})
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale)
rate_qb = qinvgamma(p, shape, rate = 1/scale)
scale_qa = invgamma::qinvgamma(p, shape, scale = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
logp = exp(p)
logp_rate_qa = invgamma::qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
logp_rate_qb = qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
logp_scale_qa = invgamma::qinvgamma(logp, shape, scale = scale, log.p = TRUE)
logp_scale_qb = qinvgamma(logp, shape, scale = scale, log.p = TRUE)
ut_rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
ut_rate_qb = qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
ut_scale_qa = invgamma::qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_scale_qb = qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_qa = invgamma::qinvgamma(logp, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_qb = qinvgamma(logp, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qa = invgamma::qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qb = qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
# tests
x = runif(50, 0, 10)
shape = runif(50, 0, 10)
scale = runif(50, 0, 10)
# test rate argument works
rate_da = invgamma::dinvgamma(x, shape, rate = 1/scale)
rate_db = dinvgamma(x, shape, rate = 1/scale)
# test scale argument works
scale_da = invgamma::dinvgamma(x, shape, scale = scale)
scale_db = dinvgamma(x, shape, scale = scale)
# test log argument works for rate
lograte_da = invgamma::dinvgamma(x, shape, rate = 1/scale, log = TRUE)
lograte_db = dinvgamma(x, shape, rate = 1/scale, log = TRUE)
# test log argument works for scale
logscale_da = invgamma::dinvgamma(x, shape, scale = scale, log = TRUE)
logscale_db = dinvgamma(x, shape, scale = scale, log = TRUE)
test_that("dinvgamma is correct", {
expect_true(all.equal(rate_da, rate_db))
expect_true(all.equal(scale_da, scale_db))
expect_true(all.equal(lograte_da, lograte_db))
expect_true(all.equal(logscale_da, logscale_db))
})
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale)
rate_qb = qinvgamma(p, shape, rate = 1/scale)
scale_qa = invgamma::qinvgamma(p, shape, scale = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
logp = exp(p)
logp_rate_qa = invgamma::qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
logp_rate_qb = qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
logp_scale_qa = invgamma::qinvgamma(logp, shape, scale = scale, log.p = TRUE)
logp_scale_qb = qinvgamma(logp, shape, scale = scale, log.p = TRUE)
ut_rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
ut_rate_qb = qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
ut_scale_qa = invgamma::qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_scale_qb = qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_qa = invgamma::qinvgamma(logp, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_qb = qinvgamma(logp, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qa = invgamma::qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qb = qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("dinvgamma is correct", {
expect_equal(rate_qa, rate_qb)
expect_equal(scale_qa, scale_qb)
expect_equal(logp_rate_qa, logp_rate_qb)
expect_equal(logp_scale_qa, logp_scale_qb)
expect_equal(ut_rate_qa, ut_rate_qb)
expect_equal(ut_scale_qa, ut_scale_qb)
expect_equal(ut_logp_rate_qa, ut_logp_rate_qb)
expect_equal(ut_logp_scale_qa, ut_logp_scale_qb)
})
rate_pa = invgamma::qinvgamma(x, shape, rate = 1/scale)
rate_pb = qinvgamma(x, shape, rate = 1/scale)
scale_pa = invgamma::qinvgamma(x, shape, scale = scale)
scale_pb = qinvgamma(x, shape, scale = scale)
logp_rate_pa = invgamma::qinvgamma(x, shape, rate = 1/scale, log.p = TRUE)
logp_rate_pb = qinvgamma(x, shape, rate = 1/scale, log.p = TRUE)
logp_scale_pa = invgamma::qinvgamma(x, shape, scale = scale, log.p = TRUE)
logp_scale_pb = qinvgamma(x, shape, scale = scale, log.p = TRUE)
ut_rate_pa = invgamma::qinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE)
ut_rate_pb = qinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE)
ut_scale_pa = invgamma::qinvgamma(x, shape, scale = scale, lower.tail = FALSE)
ut_scale_pb = qinvgamma(x, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_pa = invgamma::qinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_pb = qinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_pa = invgamma::qinvgamma(x, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_pb = qinvgamma(x, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("pinvgamma is correct", {
expect_equal(rate_pa, rate_pb)
expect_equal(scale_pa, scale_pb)
expect_equal(logp_rate_pa, logp_rate_pb)
expect_equal(logp_scale_pa, logp_scale_pb)
expect_equal(ut_rate_pa, ut_rate_pb)
expect_equal(ut_scale_pa, ut_scale_pb)
expect_equal(ut_logp_rate_pa, ut_logp_rate_pb)
expect_equal(ut_logp_scale_pa, ut_logp_scale_pb)
})
test_that("dinvgamma is correct", {
expect_true(all.equal(rate_da, rate_db))
expect_true(all.equal(scale_da, scale_db))
expect_true(all.equal(lograte_da, lograte_db))
expect_true(all.equal(logscale_da, logscale_db))
})
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale)
rate_qb = qinvgamma(p, shape, rate = 1/scale)
scale_qa = invgamma::qinvgamma(p, shape, scale = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
logp = exp(p)
logp_rate_qa = invgamma::qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
logp_rate_qb = qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
logp_scale_qa = invgamma::qinvgamma(logp, shape, scale = scale, log.p = TRUE)
logp_scale_qb = qinvgamma(logp, shape, scale = scale, log.p = TRUE)
ut_rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
ut_rate_qb = qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
ut_scale_qa = invgamma::qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_scale_qb = qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_qa = invgamma::qinvgamma(logp, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_qb = qinvgamma(logp, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qa = invgamma::qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qb = qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("qinvgamma is correct", {
expect_equal(rate_qa, rate_qb)
expect_equal(scale_qa, scale_qb)
expect_equal(logp_rate_qa, logp_rate_qb)
expect_equal(logp_scale_qa, logp_scale_qb)
expect_equal(ut_rate_qa, ut_rate_qb)
expect_equal(ut_scale_qa, ut_scale_qb)
expect_equal(ut_logp_rate_qa, ut_logp_rate_qb)
expect_equal(ut_logp_scale_qa, ut_logp_scale_qb)
})
rate_pa = invgamma::pinvgamma(x, shape, rate = 1/scale)
rate_pb = pinvgamma(x, shape, rate = 1/scale)
scale_pa = invgamma::pinvgamma(x, shape, scale = scale)
scale_pb = pinvgamma(x, shape, scale = scale)
logp_rate_pa = invgamma::pinvgamma(x, shape, rate = 1/scale, log.p = TRUE)
logp_rate_pb = pinvgamma(x, shape, rate = 1/scale, log.p = TRUE)
logp_scale_pa = invgamma::pinvgamma(x, shape, scale = scale, log.p = TRUE)
logp_scale_pb = pinvgamma(x, shape, scale = scale, log.p = TRUE)
ut_rate_pa = invgamma::pinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE)
ut_rate_pb = pinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE)
ut_scale_pa = invgamma::pinvgamma(x, shape, scale = scale, lower.tail = FALSE)
ut_scale_pb = pinvgamma(x, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_pa = invgamma::pinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_pb = pinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_pa = invgamma::pinvgamma(x, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_pb = pinvgamma(x, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("pinvgamma is correct", {
expect_equal(rate_pa, rate_pb)
expect_equal(scale_pa, scale_pb)
expect_equal(logp_rate_pa, logp_rate_pb)
expect_equal(logp_scale_pa, logp_scale_pb)
expect_equal(ut_rate_pa, ut_rate_pb)
expect_equal(ut_scale_pa, ut_scale_pb)
expect_equal(ut_logp_rate_pa, ut_logp_rate_pb)
expect_equal(ut_logp_scale_pa, ut_logp_scale_pb)
})
set.seed(1)
r1 = invgamma::rinvgamma(3, 1.5, rate = 1.5)
set.seed(1)
r2 = rinvgamma(3, 1.5, rate = 1.5)
set.seed(3)
r3 = invgamma::rinvgamma(3, 1.5, scale = 1.5)
set.seed(3)
r4 = rinvgamma(3, 1.5, scale = 1.5)
set.seed(1)
r1 = invgamma::rinvgamma(3, 1.5, rate = 1.5)
set.seed(1)
r2 = rinvgamma(3, 1.5, rate = 1.5)
set.seed(3)
r3 = invgamma::rinvgamma(3, 1.5, scale = 1.5)
set.seed(3)
r4 = rinvgamma(3, 1.5, scale = 1.5)
test_that("rinvgamma is correct", {
expect_equal(r1, r2)
expect_equal(r3, r4)
})
#' The Inverse Gamma Distribution
#'
#' @inheritParams stats::GammaDist
#' @value
#' \code{dinvgamma} gives the density, \code{pinvgamma} gives the distribution function,
#' \code{qinvgamma} gives the quantile function, and \code{rinvgamma}
#' generates random deviates.
#'
#' Invalid arguments will result in return value \code{NaN}, with a warning.
#'
#' The length of the result is determined by \code{n} for \code{rinvgamma},
#' and is the maximum of the lengths of the numerical arguments for the
#' other functions.
#'
#' The numerical arguments other than \code{n} are recycled to the length
#' of the result. Only the first elements of the logical arguments are used.
#' @export
#' @rdname InvGammaDist
#' @examples
#' -log(dinvgamma(1:4, shape = 1))
#' p <- (1:9)/10
#' pgamma(qgamma(p, shape = 2), shape = 2)
#' 1 - 1/exp(qgamma(p, shape = 1))
rinvgamma <- function(n, shape, rate = 1, scale = 1/rate) {
if (!missing(rate) && !missing(scale)) {
if (abs(rate * scale - 1) < 1e-15) {
warning("specify 'rate' or 'scale' but not both")
} else {
stop("specify 'rate' or 'scale' but not both")
}
}
1/stats::rgamma(n, shape = shape, scale = scale)
}
#' @rdname InvGammaDist
#' @export
dinvgamma <- function(x, shape, rate = 1, scale = 1/rate, log = FALSE) {
if (!missing(rate) && !missing(scale)) {
if (abs(rate * scale - 1) < 1e-15) {
warning("specify 'rate' or 'scale' but not both")
} else {
stop("specify 'rate' or 'scale' but not both")
}
}
if (!log) {
stats::dgamma(1/x, shape = shape, scale = scale, log = log)/x^2
} else {
stats::dgamma(1/x, shape = shape, scale = scale, log = log) - 2 * log(x)
}
}
#' @rdname InvGammaDist
#' @export
pinvgamma <- function(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE) {
if (!missing(rate) && !missing(scale)) {
if (abs(rate * scale - 1) < 1e-15) {
warning("specify 'rate' or 'scale' but not both")
} else {
stop("specify 'rate' or 'scale' but not both")
}
}
stats::pgamma(1/q, shape = shape, scale = scale, lower.tail = !lower.tail, log.p = log.p)
}
#' @rdname InvGammaDist
#' @export
qinvgamma <- function(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, log.p = FALSE) {
if (!missing(rate) && !missing(scale)) {
if (abs(rate * scale - 1) < 1e-15) {
warning("specify 'rate' or 'scale' but not both")
} else {
stop("specify 'rate' or 'scale' but not both")
}
}
1/stats::qgamma(1 - p, shape = shape, scale = scale, lower.tail = lower.tail, log.p = log.p)
}
set.seed(1)
r1 = invgamma::rinvgamma(3, 1.5, rate = 1.5)
set.seed(1)
r2 = rinvgamma(3, 1.5, rate = 1.5)
set.seed(3)
r3 = invgamma::rinvgamma(3, 1.5, scale = 1.5)
set.seed(3)
r4 = rinvgamma(3, 1.5, scale = 1.5)
test_that("rinvgamma is correct", {
expect_equal(r1, r2)
expect_equal(r3, r4)
})
# tests
set.seed(7)
x = runif(50, 0, 10)
shape = runif(50, 0, 10)
scale = runif(50, 0, 10)
# test rate argument works
rate_da = invgamma::dinvgamma(x, shape, rate = 1/scale)
rate_db = dinvgamma(x, shape, rate = 1/scale)
# test scale argument works
scale_da = invgamma::dinvgamma(x, shape, scale = scale)
scale_db = dinvgamma(x, shape, scale = scale)
# test log argument works for rate
lograte_da = invgamma::dinvgamma(x, shape, rate = 1/scale, log = TRUE)
lograte_db = dinvgamma(x, shape, rate = 1/scale, log = TRUE)
# test log argument works for scale
logscale_da = invgamma::dinvgamma(x, shape, scale = scale, log = TRUE)
logscale_db = dinvgamma(x, shape, scale = scale, log = TRUE)
test_that("dinvgamma is correct", {
expect_true(all.equal(rate_da, rate_db))
expect_true(all.equal(scale_da, scale_db))
expect_true(all.equal(lograte_da, lograte_db))
expect_true(all.equal(logscale_da, logscale_db))
})
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale)
rate_qb = qinvgamma(p, shape, rate = 1/scale)
scale_qa = invgamma::qinvgamma(p, shape, scale = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
logp = exp(p)
logp_rate_qa = invgamma::qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
logp_rate_qb = qinvgamma(logp, shape, rate = 1/scale, log.p = TRUE)
logp_scale_qa = invgamma::qinvgamma(logp, shape, scale = scale, log.p = TRUE)
logp_scale_qb = qinvgamma(logp, shape, scale = scale, log.p = TRUE)
ut_rate_qa = invgamma::qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
ut_rate_qb = qinvgamma(p, shape, rate = 1/scale, lower.tail = FALSE)
ut_scale_qa = invgamma::qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_scale_qb = qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_qa = invgamma::qinvgamma(logp, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_qb = qinvgamma(logp, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qa = invgamma::qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qb = qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("qinvgamma is correct", {
expect_equal(rate_qa, rate_qb)
expect_equal(scale_qa, scale_qb)
expect_equal(logp_rate_qa, logp_rate_qb)
expect_equal(logp_scale_qa, logp_scale_qb)
expect_equal(ut_rate_qa, ut_rate_qb)
expect_equal(ut_scale_qa, ut_scale_qb)
expect_equal(ut_logp_rate_qa, ut_logp_rate_qb)
expect_equal(ut_logp_scale_qa, ut_logp_scale_qb)
})
rate_pa = invgamma::pinvgamma(x, shape, rate = 1/scale)
rate_pb = pinvgamma(x, shape, rate = 1/scale)
scale_pa = invgamma::pinvgamma(x, shape, scale = scale)
scale_pb = pinvgamma(x, shape, scale = scale)
logp_rate_pa = invgamma::pinvgamma(x, shape, rate = 1/scale, log.p = TRUE)
logp_rate_pb = pinvgamma(x, shape, rate = 1/scale, log.p = TRUE)
logp_scale_pa = invgamma::pinvgamma(x, shape, scale = scale, log.p = TRUE)
logp_scale_pb = pinvgamma(x, shape, scale = scale, log.p = TRUE)
ut_rate_pa = invgamma::pinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE)
ut_rate_pb = pinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE)
ut_scale_pa = invgamma::pinvgamma(x, shape, scale = scale, lower.tail = FALSE)
ut_scale_pb = pinvgamma(x, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_pa = invgamma::pinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_pb = pinvgamma(x, shape, rate = 1/scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_pa = invgamma::pinvgamma(x, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_pb = pinvgamma(x, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("pinvgamma is correct", {
expect_equal(rate_pa, rate_pb)
expect_equal(scale_pa, scale_pb)
expect_equal(logp_rate_pa, logp_rate_pb)
expect_equal(logp_scale_pa, logp_scale_pb)
expect_equal(ut_rate_pa, ut_rate_pb)
expect_equal(ut_scale_pa, ut_scale_pb)
expect_equal(ut_logp_rate_pa, ut_logp_rate_pb)
expect_equal(ut_logp_scale_pa, ut_logp_scale_pb)
})
set.seed(1)
r1 = invgamma::rinvgamma(3, 1.5, rate = 1.5)
set.seed(1)
r2 = rinvgamma(3, 1.5, rate = 1.5)
set.seed(3)
r3 = invgamma::rinvgamma(3, 1.5, scale = 1.5)
set.seed(3)
r4 = rinvgamma(3, 1.5, scale = 1.5)
test_that("rinvgamma is correct", {
expect_equal(r1, r2)
expect_equal(r3, r4)
})
devtools::load_all(".")
?dinvgamma
?dgamma
devtools::load_all(".")
?InvGammaDist
devtools::load_all(".")
?InvGammaDist
devtools::load_all(".")
?InvGammaDist
devtools::load_all(".")
?InvGammaDist
?dgamma
?invgamma::invgamma
