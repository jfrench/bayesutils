s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
install.packages("nimble")
?invgamma::invchisq
?chisq
?dchisq
?dchisq
rinvgamma
#' The Inverse Gamma Distribution
#'
#' Density, distribution function, quantile function, and random generation for
#' the inverse gamma distribution with parameters \code{shape} and \code{scale}. Note that
#' the parameterization is consistent with Gelman et al. (2013) (see References) and
#' that \code{scale} precedes \code{rate} in the argument list, which is the
#' reverse of the \code{\link[stats]{GammaDist}} functions.
#'
#' If \code{scale} is omitted, it assumes the default value of 1.
#'
#' The inverse gamma distribution with parameters \code{shape = a} and \code{scale = s} has density
#'
#' \deqn{f(x)= s^a/Gamma(a) x^(-a-1) e^-(s/x)}
#'
#' for \eqn{x \ge 0}, \eqn{a > 0} and \eqn{s > 0}. (Here \eqn{Gamma(a)} is the function implemented by R's
#' \code{gamma()} and defined in its help. Note that \eqn{a = 0} corresponds to the trivial distribution with all mass at point 0.)
#'
#' The mean and variance are \eqn{E(X) = s/(a - 1)} for \eqn{a>1} and \eqn{Var(X) = s^2/(a-1)^2/(a-2)} for \eqn{a>2}.
#'
#' The cumulative hazard \eqn{H(t) = - log(1 - F(t))} is
#' \code{-pinvgamma(t, ..., lower = FALSE, log = TRUE)}
#'
#' @inheritParams stats::GammaDist
#' @return
#' \code{dinvgamma} gives the density, \code{pinvgamma} gives the distribution function,
#' \code{qinvgamma} gives the quantile function, and \code{rinvgamma}
#' generates random deviates.
#'
#' Invalid arguments will result in return value \code{NaN}, with a warning.
#'
#' The length of the result is determined by \code{n} for \code{rinvgamma},
#' and is the maximum of the lengths of the numerical arguments for the
#' other functions.
#'
#' The numerical arguments other than \code{n} are recycled to the length
#' of the result. Only the first elements of the logical arguments are used.
#' @export
#' @references Gelman, A., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, A., & Rubin, D. B. (2013). Bayesian data analysis, 3rd edition. CRC press.
#' @rdname InvChisquare
#' @examples
#' x <- 1:10
#' ## InvChisquare(df = nu) is a special case of InvGamma(shape = nu/2, scale = 1/2)
#' all.equal(dchisq(x, df = 2), dexp(x, 1/2))
#' all.equal(pchisq(x, df = 2), pexp(x, 1/2))
#' @rdname InvChisquare
rinvchisq <- function(n, df, scale = sqrt(df)) {
rinvgamma(n, shape = df/2, scale = df/2*scale^2)
}
#' @export
#' @rdname InvChisquare
dinvchisq <- function(x, df, scale = sqrt(df), log = FALSE) {
dinvgamma(x, shape = df/2, scale = df/2*scale^2, log = log)
}
#' @export
#' @rdname InvChisquare
pinvchisq <- function(q, df, scale = sqrt(df), lower.tail = TRUE, log.p = FALSE) {
pinvgamma(q, shape = df/2, scale = df/2*scale^2, lower.tail = lower.tail, log.p = log.p)
}
#' @export
#' @rdname InvChisquare
qinvchisq <- function(p, df, scale = sqrt(df), lower.tail = TRUE, log.p = FALSE) {
qinvgamma(p, shape = df/2, scale = df/2*scale^2, lower.tail = lower.tail, log.p = log.p)
}
x = 1:10
## InvChisquare(df = nu) is a special case of InvGamma(shape = nu/2, scale = 1/2)
nu = 3
all.equal(dinvchisq(x, df = nu), dinvgamma(x, shape = nu/2, scale = 1/2))
#' The Inverse Gamma Distribution
#'
#' Density, distribution function, quantile function, and random generation for
#' the inverse gamma distribution with parameters \code{shape} and \code{scale}. Note that
#' the parameterization is consistent with Gelman et al. (2013) (see References) and
#' that \code{scale} precedes \code{rate} in the argument list, which is the
#' reverse of the \code{\link[stats]{GammaDist}} functions.
#'
#' If \code{scale} is omitted, it assumes the default value of 1.
#'
#' The inverse gamma distribution with parameters \code{shape = a} and \code{scale = s} has density
#'
#' \deqn{f(x)= s^a/Gamma(a) x^(-a-1) e^-(s/x)}
#'
#' for \eqn{x \ge 0}, \eqn{a > 0} and \eqn{s > 0}. (Here \eqn{Gamma(a)} is the function implemented by R's
#' \code{gamma()} and defined in its help. Note that \eqn{a = 0} corresponds to the trivial distribution with all mass at point 0.)
#'
#' The mean and variance are \eqn{E(X) = s/(a - 1)} for \eqn{a>1} and \eqn{Var(X) = s^2/(a-1)^2/(a-2)} for \eqn{a>2}.
#'
#' The cumulative hazard \eqn{H(t) = - log(1 - F(t))} is
#' \code{-pinvgamma(t, ..., lower = FALSE, log = TRUE)}
#'
#' @inheritParams stats::GammaDist
#' @return
#' \code{dinvgamma} gives the density, \code{pinvgamma} gives the distribution function,
#' \code{qinvgamma} gives the quantile function, and \code{rinvgamma}
#' generates random deviates.
#'
#' Invalid arguments will result in return value \code{NaN}, with a warning.
#'
#' The length of the result is determined by \code{n} for \code{rinvgamma},
#' and is the maximum of the lengths of the numerical arguments for the
#' other functions.
#'
#' The numerical arguments other than \code{n} are recycled to the length
#' of the result. Only the first elements of the logical arguments are used.
#' @export
#' @references Gelman, A., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, A., & Rubin, D. B. (2013). Bayesian data analysis, 3rd edition. CRC press.
#' @rdname InvGammaDist
#' @examples
#' -log(dinvgamma(1:4, shape = 1))
#' p <- (1:9)/10
#' pinvgamma(qinvgamma(p, shape = 2), shape = 2)
#' 1 - 1/exp(qinvgamma(p, shape = 1))
rinvgamma <- function(n, shape, scale = 1, rate = 1/scale) {
if (!missing(rate) && !missing(scale)) {
if (abs(rate * scale - 1) < 1e-15) {
warning("specify 'rate' or 'scale' but not both")
} else {
stop("specify 'rate' or 'scale' but not both")
}
}
1/stats::rgamma(n, shape = shape, scale = rate)
}
#' @rdname InvGammaDist
#' @export
dinvgamma <- function(x, shape, scale = 1, rate = 1/scale, log = FALSE) {
if (!missing(rate) && !missing(scale)) {
if (abs(rate * scale - 1) < 1e-15) {
warning("specify 'rate' or 'scale' but not both")
} else {
stop("specify 'rate' or 'scale' but not both")
}
}
if (!log) {
stats::dgamma(1/x, shape = shape, scale = rate, log = log)/x^2
} else {
stats::dgamma(1/x, shape = shape, scale = rate, log = log) - 2 * log(x)
}
}
#' @rdname InvGammaDist
#' @export
pinvgamma <- function(q, shape, scale = 1, rate = 1/scale, lower.tail = TRUE, log.p = FALSE) {
if (!missing(rate) && !missing(scale)) {
if (abs(rate * scale - 1) < 1e-15) {
warning("specify 'rate' or 'scale' but not both")
} else {
stop("specify 'rate' or 'scale' but not both")
}
}
stats::pgamma(1/q, shape = shape, scale = rate, lower.tail = !lower.tail, log.p = log.p)
}
#' @rdname InvGammaDist
#' @export
qinvgamma <- function(p, shape, scale = 1, rate = 1/scale, lower.tail = TRUE, log.p = FALSE) {
if (!missing(rate) && !missing(scale)) {
if (abs(rate * scale - 1) < 1e-15) {
warning("specify 'rate' or 'scale' but not both")
} else {
stop("specify 'rate' or 'scale' but not both")
}
}
1/stats::qgamma(1 - p, shape = shape, scale = rate, lower.tail = lower.tail, log.p = log.p)
}
x = 1:10
## InvChisquare(df = nu) is a special case of InvGamma(shape = nu/2, scale = 1/2)
nu = 3
all.equal(dinvchisq(x, df = nu), dinvgamma(x, shape = nu/2, scale = 1/2))
dinvchisq(x, df = nu)
dinvgamma(x, shape = nu/2, scale = 1/2)
#' The Inverse Gamma Distribution
#'
#' Density, distribution function, quantile function, and random generation for
#' the inverse gamma distribution with parameters \code{shape} and \code{scale}. Note that
#' the parameterization is consistent with Gelman et al. (2013) (see References) and
#' that \code{scale} precedes \code{rate} in the argument list, which is the
#' reverse of the \code{\link[stats]{GammaDist}} functions.
#'
#' If \code{scale} is omitted, it assumes the default value of 1.
#'
#' The inverse gamma distribution with parameters \code{shape = a} and \code{scale = s} has density
#'
#' \deqn{f(x)= s^a/Gamma(a) x^(-a-1) e^-(s/x)}
#'
#' for \eqn{x \ge 0}, \eqn{a > 0} and \eqn{s > 0}. (Here \eqn{Gamma(a)} is the function implemented by R's
#' \code{gamma()} and defined in its help. Note that \eqn{a = 0} corresponds to the trivial distribution with all mass at point 0.)
#'
#' The mean and variance are \eqn{E(X) = s/(a - 1)} for \eqn{a>1} and \eqn{Var(X) = s^2/(a-1)^2/(a-2)} for \eqn{a>2}.
#'
#' The cumulative hazard \eqn{H(t) = - log(1 - F(t))} is
#' \code{-pinvgamma(t, ..., lower = FALSE, log = TRUE)}
#'
#' @inheritParams stats::GammaDist
#' @return
#' \code{dinvgamma} gives the density, \code{pinvgamma} gives the distribution function,
#' \code{qinvgamma} gives the quantile function, and \code{rinvgamma}
#' generates random deviates.
#'
#' Invalid arguments will result in return value \code{NaN}, with a warning.
#'
#' The length of the result is determined by \code{n} for \code{rinvgamma},
#' and is the maximum of the lengths of the numerical arguments for the
#' other functions.
#'
#' The numerical arguments other than \code{n} are recycled to the length
#' of the result. Only the first elements of the logical arguments are used.
#' @export
#' @references Gelman, A., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, A., & Rubin, D. B. (2013). Bayesian data analysis, 3rd edition. CRC press.
#' @rdname InvChisquare
#' @examples
#' x = 1:10
#' ## InvChisquare(df = nu) is a special case of InvGamma(shape = nu/2, scale = 1/2)
#' nu = 3
#' all.equal(dinvchisq(x, df = nu), dinvgamma(x, shape = nu/2, scale = 1/2))
#' all.equal(pchisq(x, df = 2), pexp(x, 1/2))
#' @rdname InvChisquare
rinvchisq <- function(n, df, scale = 1/sqrt(df)) {
rinvgamma(n, shape = df/2, scale = df/2*scale^2)
}
#' @export
#' @rdname InvChisquare
dinvchisq <- function(x, df, scale = 1/sqrt(df), log = FALSE) {
dinvgamma(x, shape = df/2, scale = df/2*scale^2, log = log)
}
#' @export
#' @rdname InvChisquare
pinvchisq <- function(q, df, scale = 1/sqrt(df), lower.tail = TRUE, log.p = FALSE) {
pinvgamma(q, shape = df/2, scale = df/2*scale^2, lower.tail = lower.tail, log.p = log.p)
}
#' @export
#' @rdname InvChisquare
qinvchisq <- function(p, df, scale = 1/sqrt(df), lower.tail = TRUE, log.p = FALSE) {
qinvgamma(p, shape = df/2, scale = df/2*scale^2, lower.tail = lower.tail, log.p = log.p)
}
all.equal(dinvchisq(x, df = nu), dinvgamma(x, shape = nu/2, scale = 1/2))
all.equal(pinvchisq(x, df = nu), pinvgamma(x, shape = nu/2, scale = 1/2))
## InvChisquare(df = nu, scale = s2) is a special case of InvGamma(shape = nu/2, scale = nu/2 * s2)
s2 = 1.7
all.equal(dinvchisq(x, df = nu, scale = s2), dinvgamma(x, shape = nu/2, scale = nu/2 * s2))
#' The Inverse Gamma Distribution
#'
#' Density, distribution function, quantile function, and random generation for
#' the inverse gamma distribution with parameters \code{shape} and \code{scale}. Note that
#' the parameterization is consistent with Gelman et al. (2013) (see References) and
#' that \code{scale} precedes \code{rate} in the argument list, which is the
#' reverse of the \code{\link[stats]{GammaDist}} functions.
#'
#' If \code{scale} is omitted, it assumes the default value of 1.
#'
#' The inverse gamma distribution with parameters \code{shape = a} and \code{scale = s} has density
#'
#' \deqn{f(x)= s^a/Gamma(a) x^(-a-1) e^-(s/x)}
#'
#' for \eqn{x \ge 0}, \eqn{a > 0} and \eqn{s > 0}. (Here \eqn{Gamma(a)} is the function implemented by R's
#' \code{gamma()} and defined in its help. Note that \eqn{a = 0} corresponds to the trivial distribution with all mass at point 0.)
#'
#' The mean and variance are \eqn{E(X) = s/(a - 1)} for \eqn{a>1} and \eqn{Var(X) = s^2/(a-1)^2/(a-2)} for \eqn{a>2}.
#'
#' The cumulative hazard \eqn{H(t) = - log(1 - F(t))} is
#' \code{-pinvgamma(t, ..., lower = FALSE, log = TRUE)}
#'
#' @inheritParams stats::GammaDist
#' @return
#' \code{dinvgamma} gives the density, \code{pinvgamma} gives the distribution function,
#' \code{qinvgamma} gives the quantile function, and \code{rinvgamma}
#' generates random deviates.
#'
#' Invalid arguments will result in return value \code{NaN}, with a warning.
#'
#' The length of the result is determined by \code{n} for \code{rinvgamma},
#' and is the maximum of the lengths of the numerical arguments for the
#' other functions.
#'
#' The numerical arguments other than \code{n} are recycled to the length
#' of the result. Only the first elements of the logical arguments are used.
#' @export
#' @references Gelman, A., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, A., & Rubin, D. B. (2013). Bayesian data analysis, 3rd edition. CRC press.
#' @rdname InvChisquare
#' @examples
#' x = 1:10
#' ## InvChisquare(df = nu) is a special case of InvGamma(shape = nu/2, scale = 1/2)
#' nu = 3
#' all.equal(dinvchisq(x, df = nu), dinvgamma(x, shape = nu/2, scale = 1/2))
#' all.equal(pinvchisq(x, df = nu), pinvgamma(x, shape = nu/2, scale = 1/2))
#'
#' ## InvChisquare(df = nu, scale = s2) is a special case of InvGamma(shape = nu/2, scale = nu/2 * s2)
#' s2 = 1.7
#' all.equal(dinvchisq(x, df = nu, scale = s2), dinvgamma(x, shape = nu/2, scale = nu/2 * s2))
#' all.equal(pinvchisq(x, df = nu, scale = s2), pinvgamma(x, shape = nu/2, scale = nu/2 * s2))
#' all.equal(pchisq(x, df = 2), pexp(x, 1/2))
#' @rdname InvChisquare
rinvchisq <- function(n, df, scale = 1/df) {
rinvgamma(n, shape = df/2, scale = df/2*scale)
}
#' @export
#' @rdname InvChisquare
dinvchisq <- function(x, df, scale = 1/df, log = FALSE) {
dinvgamma(x, shape = df/2, scale = df/2*scale, log = log)
}
#' @export
#' @rdname InvChisquare
pinvchisq <- function(q, df, scale = 1/df, lower.tail = TRUE, log.p = FALSE) {
pinvgamma(q, shape = df/2, scale = df/2*scale, lower.tail = lower.tail, log.p = log.p)
}
#' @export
#' @rdname InvChisquare
qinvchisq <- function(p, df, scale = 1/df, lower.tail = TRUE, log.p = FALSE) {
qinvgamma(p, shape = df/2, scale = df/2*scale, lower.tail = lower.tail, log.p = log.p)
}
x = 1:10
## InvChisquare(df = nu) is a special case of InvGamma(shape = nu/2, scale = 1/2)
nu = 3
all.equal(dinvchisq(x, df = nu), dinvgamma(x, shape = nu/2, scale = 1/2))
all.equal(pinvchisq(x, df = nu), pinvgamma(x, shape = nu/2, scale = 1/2))
## InvChisquare(df = nu, scale = s2) is a special case of InvGamma(shape = nu/2, scale = nu/2 * s2)
s2 = 1.7
all.equal(dinvchisq(x, df = nu, scale = s2), dinvgamma(x, shape = nu/2, scale = nu/2 * s2))
all.equal(pinvchisq(x, df = nu, scale = s2), pinvgamma(x, shape = nu/2, scale = nu/2 * s2))
#' The (scaled) Inverse Chi-squared Distribution
#'
#' Density, distribution function, quantile function, and random generation for
#' the (scaled) inverse chi-square distribution with \code{df} degrees of freedom and
#' optional parameter \code{scale}. The parameterization is consistent with Gelman et al. (2013). By default,
#' the \code{scale} is set to match the inverse chi-square distribution. If
#' \code{scale} is changed, then the scaled inverse chi-squared ditsribution.
#'
#' If \code{scale} is omitted, it assumes the default value of 1.
#'
#' The inverse gamma distribution with parameters \code{df = n} and \code{scale = s^2} has density
#'
#' \deqn{f(x)= (2^{-n/2}/Gamma(n/2)s^n x^(-n/2 - 1) e^(-n s^2/(2x)}
#'
#' for \eqn{x \ge 0}, \eqn{n > 0} and \eqn{s > 0}. (Here \eqn{Gamma(n/2)} is the function implemented by R's
#' \code{gamma()} and defined in its help. Note that \eqn{n = 0} corresponds to the trivial distribution with all mass at point 0.)
#'
#' The mean and variance are \eqn{E(X) = n/(n - 2) s^2} for \eqn{n > 2} and \eqn{Var(X) = 2n^2/(n-2)^2/(n-4) s^4} for \eqn{n>4}.
#'
#' The cumulative hazard \eqn{H(t) = - log(1 - F(t))} is
#' \code{-pinvgamma(t, ..., lower = FALSE, log = TRUE)}
#'
#' @inheritParams InvGammaDist
#' @return
#' \code{dinvchisq} gives the density, \code{pinvchisq} gives the distribution function,
#' \code{qinvchisq} gives the quantile function, and \code{rinvchisq}
#' generates random deviates.
#'
#' Invalid arguments will result in return value \code{NaN}, with a warning.
#'
#' The length of the result is determined by \code{n} for \code{rinvchisq},
#' and is the maximum of the lengths of the numerical arguments for the
#' other functions.
#'
#' The numerical arguments other than \code{n} are recycled to the length
#' of the result. Only the first elements of the logical arguments are used.
#' @export
#' @references Gelman, A., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, A., & Rubin, D. B. (2013). Bayesian data analysis, 3rd edition. CRC press.
#' @rdname InvChisquare
#' @examples
#' x = 1:10
#' ## InvChisquare(df = n) is a special case of InvGamma(shape = n/2, scale = 1/2)
#' nu = 3
#' all.equal(dinvchisq(x, df = n), dinvgamma(x, shape = n/2, scale = 1/2))
#' all.equal(pinvchisq(x, df = n), pinvgamma(x, shape = n/2, scale = 1/2))
#'
#' ## InvChisquare(df = n, scale = s^2) is a special case of InvGamma(shape = n/2, scale = n/2 * s^2)
#' s = 1.7
#' all.equal(dinvchisq(x, df = n, scale = s^2), dinvgamma(x, shape = n/2, scale = n/2 * s^2))
#' all.equal(pinvchisq(x, df = n, scale = s^2), pinvgamma(x, shape = n/2, scale = n/2 * s^2))
#' @rdname InvChisquare
rinvchisq <- function(n, df, scale = 1/df) {
rinvgamma(n, shape = df/2, scale = df/2*scale)
}
#' @export
#' @rdname InvChisquare
dinvchisq <- function(x, df, scale = 1/df, log = FALSE) {
dinvgamma(x, shape = df/2, scale = df/2*scale, log = log)
}
#' @export
#' @rdname InvChisquare
pinvchisq <- function(q, df, scale = 1/df, lower.tail = TRUE, log.p = FALSE) {
pinvgamma(q, shape = df/2, scale = df/2*scale, lower.tail = lower.tail, log.p = log.p)
}
#' @export
#' @rdname InvChisquare
qinvchisq <- function(p, df, scale = 1/df, lower.tail = TRUE, log.p = FALSE) {
qinvgamma(p, shape = df/2, scale = df/2*scale, lower.tail = lower.tail, log.p = log.p)
}
x = 1:10
## InvChisquare(df = n) is a special case of InvGamma(shape = n/2, scale = 1/2)
nu = 3
all.equal(dinvchisq(x, df = n), dinvgamma(x, shape = n/2, scale = 1/2))
all.equal(pinvchisq(x, df = n), pinvgamma(x, shape = n/2, scale = 1/2))
## InvChisquare(df = n, scale = s^2) is a special case of InvGamma(shape = n/2, scale = n/2 * s^2)
s = 1.7
all.equal(dinvchisq(x, df = n, scale = s^2), dinvgamma(x, shape = n/2, scale = n/2 * s^2))
all.equal(pinvchisq(x, df = n, scale = s^2), pinvgamma(x, shape = n/2, scale = n/2 * s^2))
x = 1:10
## InvChisquare(df = n) is a special case of InvGamma(shape = n/2, scale = 1/2)
n = 3
all.equal(dinvchisq(x, df = n), dinvgamma(x, shape = n/2, scale = 1/2))
all.equal(pinvchisq(x, df = n), pinvgamma(x, shape = n/2, scale = 1/2))
## InvChisquare(df = n, scale = s^2) is a special case of InvGamma(shape = n/2, scale = n/2 * s^2)
s = 1.7
all.equal(dinvchisq(x, df = n, scale = s^2), dinvgamma(x, shape = n/2, scale = n/2 * s^2))
all.equal(pinvchisq(x, df = n, scale = s^2), pinvgamma(x, shape = n/2, scale = n/2 * s^2))
devtools::load_all(".")
devtools::load_all(".")
?rinvchisq
