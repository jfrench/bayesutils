if (!missing(rate) && !missing(scale)) {
if (abs(rate * scale - 1) < 1e-15) {
warning("specify 'rate' or 'scale' but not both")
} else {
stop("specify 'rate' or 'scale' but not both")
}
}
stats::pgamma(1/q, shape = shape, scale = rate, lower.tail = !lower.tail, log.p = log.p)
}
#' @rdname InvGammaDist
#' @export
qinvgamma <- function(p, shape, scale = 1, rate = 1/scale, lower.tail = TRUE, log.p = FALSE) {
if (!missing(rate) && !missing(scale)) {
if (abs(rate * scale - 1) < 1e-15) {
warning("specify 'rate' or 'scale' but not both")
} else {
stop("specify 'rate' or 'scale' but not both")
}
}
1/stats::qgamma(1 - p, shape = shape, scale = rate, lower.tail = lower.tail, log.p = log.p)
}
if (requireNamespace("invgamma", quietly = TRUE)) {
# tests
set.seed(7)
x = runif(50, 0, 10)
shape = runif(50, 0, 10)
scale = runif(50, 0, 10)
rate = 1/scale
## test dinvgamma
# test rate argument works
rate_da = invgamma::dinvgamma(x, shape, scale = rate)
rate_db = dinvgamma(x, shape, rate = rate)
# test scale argument works
scale_da = invgamma::dinvgamma(x, shape, rate = scale)
scale_db = dinvgamma(x, shape, scale = scale)
# test log argument works for rate
lograte_da = invgamma::dinvgamma(x, shape, scale = rate, log = TRUE)
lograte_db = dinvgamma(x, shape, rate = rate, log = TRUE)
# test log argument works for scale
logscale_da = invgamma::dinvgamma(x, shape, rate = scale, log = TRUE)
logscale_db = dinvgamma(x, shape, scale = scale, log = TRUE)
test_that("dinvgamma is correct", {
expect_true(all.equal(rate_da, rate_db))
expect_true(all.equal(scale_da, scale_db))
expect_true(all.equal(lograte_da, lograte_db))
expect_true(all.equal(logscale_da, logscale_db))
})
set.seed(7)
x = runif(50, 0, 10)
shape = runif(50, 0, 10)
scale = runif(50, 0, 10)
rate = 1/scale
## test dinvgamma
# test rate argument works
rate_da = invgamma::dinvgamma(x, shape, scale = rate)
rate_db = dinvgamma(x, shape, rate = rate)
# test scale argument works
scale_da = invgamma::dinvgamma(x, shape, rate = scale)
scale_db = dinvgamma(x, shape, scale = scale)
# test log argument works for rate
lograte_da = invgamma::dinvgamma(x, shape, scale = rate, log = TRUE)
lograte_db = dinvgamma(x, shape, rate = rate, log = TRUE)
# test log argument works for scale
logscale_da = invgamma::dinvgamma(x, shape, rate = scale, log = TRUE)
logscale_db = dinvgamma(x, shape, scale = scale, log = TRUE)
test_that("dinvgamma is correct", {
expect_true(all.equal(rate_da, rate_db))
expect_true(all.equal(scale_da, scale_db))
expect_true(all.equal(lograte_da, lograte_db))
expect_true(all.equal(logscale_da, logscale_db))
})
if (requireNamespace("invgamma", quietly = TRUE)) {
# tests
set.seed(7)
x = runif(50, 0, 10)
shape = runif(50, 0, 10)
scale = runif(50, 0, 10)
rate = 1/scale
## test dinvgamma
# test rate argument works
rate_da = invgamma::dinvgamma(x, shape, scale = rate)
rate_db = dinvgamma(x, shape, rate = rate)
# test scale argument works
scale_da = invgamma::dinvgamma(x, shape, rate = scale)
scale_db = dinvgamma(x, shape, scale = scale)
# test log argument works for rate
lograte_da = invgamma::dinvgamma(x, shape, scale = rate, log = TRUE)
lograte_db = dinvgamma(x, shape, rate = rate, log = TRUE)
# test log argument works for scale
logscale_da = invgamma::dinvgamma(x, shape, rate = scale, log = TRUE)
logscale_db = dinvgamma(x, shape, scale = scale, log = TRUE)
test_that("dinvgamma is correct", {
expect_true(all.equal(rate_da, rate_db))
expect_true(all.equal(scale_da, scale_db))
expect_true(all.equal(lograte_da, lograte_db))
expect_true(all.equal(logscale_da, logscale_db))
})
## test qinvgamma
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, scale = rate)
rate_qb = qinvgamma(p, shape, rate = rate)
scale_qa = invgamma::qinvgamma(p, shape, rate = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
logp = exp(p)
logp_rate_qa = invgamma::qinvgamma(logp, shape, scale = rate, log.p = TRUE)
logp_rate_qb = qinvgamma(logp, shape, rate = rate, log.p = TRUE)
logp_scale_qa = invgamma::qinvgamma(logp, shape, rate = scale, log.p = TRUE)
logp_scale_qb = qinvgamma(logp, shape, scale = scale, log.p = TRUE)
ut_rate_qa = invgamma::qinvgamma(p, shape, scale = rate, lower.tail = FALSE)
ut_rate_qb = qinvgamma(p, shape, rate = rate, lower.tail = FALSE)
ut_scale_qa = invgamma::qinvgamma(p, shape, rate = scale, lower.tail = FALSE)
ut_scale_qb = qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_qa = invgamma::qinvgamma(logp, shape, scale = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_qb = qinvgamma(logp, shape, rate = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qa = invgamma::qinvgamma(logp, shape, rate = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qb = qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("qinvgamma is correct", {
expect_equal(rate_qa, rate_qb)
expect_equal(scale_qa, scale_qb)
expect_equal(logp_rate_qa, logp_rate_qb)
expect_equal(logp_scale_qa, logp_scale_qb)
expect_equal(ut_rate_qa, ut_rate_qb)
expect_equal(ut_scale_qa, ut_scale_qb)
expect_equal(ut_logp_rate_qa, ut_logp_rate_qb)
expect_equal(ut_logp_scale_qa, ut_logp_scale_qb)
})
# tests
set.seed(7)
x = runif(50, 0, 10)
shape = runif(50, 0, 10)
scale = runif(50, 0, 10)
rate = 1/scale
## test dinvgamma
# test rate argument works
rate_da = invgamma::dinvgamma(x, shape, scale = rate)
rate_db = dinvgamma(x, shape, rate = rate)
# test scale argument works
scale_da = invgamma::dinvgamma(x, shape, rate = scale)
scale_db = dinvgamma(x, shape, scale = scale)
# test log argument works for rate
lograte_da = invgamma::dinvgamma(x, shape, scale = rate, log = TRUE)
lograte_db = dinvgamma(x, shape, rate = rate, log = TRUE)
# test log argument works for scale
logscale_da = invgamma::dinvgamma(x, shape, rate = scale, log = TRUE)
logscale_db = dinvgamma(x, shape, scale = scale, log = TRUE)
test_that("dinvgamma is correct", {
expect_true(all.equal(rate_da, rate_db))
expect_true(all.equal(scale_da, scale_db))
expect_true(all.equal(lograte_da, lograte_db))
expect_true(all.equal(logscale_da, logscale_db))
})
## test qinvgamma
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, scale = rate)
rate_qb = qinvgamma(p, shape, rate = rate)
scale_qa = invgamma::qinvgamma(p, shape, rate = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
logp = exp(p)
logp_rate_qa = invgamma::qinvgamma(logp, shape, scale = rate, log.p = TRUE)
logp_rate_qb = qinvgamma(logp, shape, rate = rate, log.p = TRUE)
logp_scale_qa = invgamma::qinvgamma(logp, shape, rate = scale, log.p = TRUE)
logp_scale_qb = qinvgamma(logp, shape, scale = scale, log.p = TRUE)
ut_rate_qa = invgamma::qinvgamma(p, shape, scale = rate, lower.tail = FALSE)
ut_rate_qb = qinvgamma(p, shape, rate = rate, lower.tail = FALSE)
ut_scale_qa = invgamma::qinvgamma(p, shape, rate = scale, lower.tail = FALSE)
ut_scale_qb = qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_qa = invgamma::qinvgamma(logp, shape, scale = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_qb = qinvgamma(logp, shape, rate = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qa = invgamma::qinvgamma(logp, shape, rate = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qb = qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("qinvgamma is correct", {
expect_equal(rate_qa, rate_qb)
expect_equal(scale_qa, scale_qb)
expect_equal(logp_rate_qa, logp_rate_qb)
expect_equal(logp_scale_qa, logp_scale_qb)
expect_equal(ut_rate_qa, ut_rate_qb)
expect_equal(ut_scale_qa, ut_scale_qb)
expect_equal(ut_logp_rate_qa, ut_logp_rate_qb)
expect_equal(ut_logp_scale_qa, ut_logp_scale_qb)
})
if (requireNamespace("invgamma", quietly = TRUE)) {
# tests
set.seed(7)
x = runif(50, 0, 10)
shape = runif(50, 0, 10)
scale = runif(50, 0, 10)
rate = 1/scale
## test dinvgamma
# test rate argument works
rate_da = invgamma::dinvgamma(x, shape, scale = rate)
rate_db = dinvgamma(x, shape, rate = rate)
# test scale argument works
scale_da = invgamma::dinvgamma(x, shape, rate = scale)
scale_db = dinvgamma(x, shape, scale = scale)
# test log argument works for rate
lograte_da = invgamma::dinvgamma(x, shape, scale = rate, log = TRUE)
lograte_db = dinvgamma(x, shape, rate = rate, log = TRUE)
# test log argument works for scale
logscale_da = invgamma::dinvgamma(x, shape, rate = scale, log = TRUE)
logscale_db = dinvgamma(x, shape, scale = scale, log = TRUE)
test_that("dinvgamma is correct", {
expect_true(all.equal(rate_da, rate_db))
expect_true(all.equal(scale_da, scale_db))
expect_true(all.equal(lograte_da, lograte_db))
expect_true(all.equal(logscale_da, logscale_db))
})
## test qinvgamma
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, scale = rate)
rate_qb = qinvgamma(p, shape, rate = rate)
scale_qa = invgamma::qinvgamma(p, shape, rate = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
logp = exp(p)
logp_rate_qa = invgamma::qinvgamma(logp, shape, scale = rate, log.p = TRUE)
logp_rate_qb = qinvgamma(logp, shape, rate = rate, log.p = TRUE)
logp_scale_qa = invgamma::qinvgamma(logp, shape, rate = scale, log.p = TRUE)
logp_scale_qb = qinvgamma(logp, shape, scale = scale, log.p = TRUE)
ut_rate_qa = invgamma::qinvgamma(p, shape, scale = rate, lower.tail = FALSE)
ut_rate_qb = qinvgamma(p, shape, rate = rate, lower.tail = FALSE)
ut_scale_qa = invgamma::qinvgamma(p, shape, rate = scale, lower.tail = FALSE)
ut_scale_qb = qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_qa = invgamma::qinvgamma(logp, shape, scale = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_qb = qinvgamma(logp, shape, rate = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qa = invgamma::qinvgamma(logp, shape, rate = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qb = qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("qinvgamma is correct", {
expect_equal(rate_qa, rate_qb)
expect_equal(scale_qa, scale_qb)
expect_equal(logp_rate_qa, logp_rate_qb)
expect_equal(logp_scale_qa, logp_scale_qb)
expect_equal(ut_rate_qa, ut_rate_qb)
expect_equal(ut_scale_qa, ut_scale_qb)
expect_equal(ut_logp_rate_qa, ut_logp_rate_qb)
expect_equal(ut_logp_scale_qa, ut_logp_scale_qb)
})
## test pinvgamma
rate_pa = invgamma::pinvgamma(x, shape, scale = rate)
rate_pb = pinvgamma(x, shape, rate = rate)
scale_pa = invgamma::pinvgamma(x, shape, rate = scale)
scale_pb = pinvgamma(x, shape, scale = scale)
logp_rate_pa = invgamma::pinvgamma(x, shape, scale = rate, log.p = TRUE)
logp_rate_pb = pinvgamma(x, shape, rate = rate, log.p = TRUE)
logp_scale_pa = invgamma::pinvgamma(x, shape, rate = scale, log.p = TRUE)
logp_scale_pb = pinvgamma(x, shape, scale = scale, log.p = TRUE)
ut_rate_pa = invgamma::pinvgamma(x, shape, scale = rate, lower.tail = FALSE)
ut_rate_pb = pinvgamma(x, shape, rate = rate, lower.tail = FALSE)
ut_scale_pa = invgamma::pinvgamma(x, shape, rate = scale, lower.tail = FALSE)
ut_scale_pb = pinvgamma(x, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_pa = invgamma::pinvgamma(x, shape, scale = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_pb = pinvgamma(x, shape, rate = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_pa = invgamma::pinvgamma(x, shape, rate = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_pb = pinvgamma(x, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("pinvgamma is correct", {
expect_equal(rate_pa, rate_pb)
expect_equal(scale_pa, scale_pb)
expect_equal(logp_rate_pa, logp_rate_pb)
expect_equal(logp_scale_pa, logp_scale_pb)
expect_equal(ut_rate_pa, ut_rate_pb)
expect_equal(ut_scale_pa, ut_scale_pb)
expect_equal(ut_logp_rate_pa, ut_logp_rate_pb)
expect_equal(ut_logp_scale_pa, ut_logp_scale_pb)
})
# tests
set.seed(7)
x = runif(50, 0, 10)
shape = runif(50, 0, 10)
scale = runif(50, 0, 10)
rate = 1/scale
## test dinvgamma
# test rate argument works
rate_da = invgamma::dinvgamma(x, shape, scale = rate)
rate_db = dinvgamma(x, shape, rate = rate)
# test scale argument works
scale_da = invgamma::dinvgamma(x, shape, rate = scale)
scale_db = dinvgamma(x, shape, scale = scale)
# test log argument works for rate
lograte_da = invgamma::dinvgamma(x, shape, scale = rate, log = TRUE)
lograte_db = dinvgamma(x, shape, rate = rate, log = TRUE)
# test log argument works for scale
logscale_da = invgamma::dinvgamma(x, shape, rate = scale, log = TRUE)
logscale_db = dinvgamma(x, shape, scale = scale, log = TRUE)
test_that("dinvgamma is correct", {
expect_true(all.equal(rate_da, rate_db))
expect_true(all.equal(scale_da, scale_db))
expect_true(all.equal(lograte_da, lograte_db))
expect_true(all.equal(logscale_da, logscale_db))
})
## test qinvgamma
p = runif(50)
rate_qa = invgamma::qinvgamma(p, shape, scale = rate)
rate_qb = qinvgamma(p, shape, rate = rate)
scale_qa = invgamma::qinvgamma(p, shape, rate = scale)
scale_qb = qinvgamma(p, shape, scale = scale)
logp = exp(p)
logp_rate_qa = invgamma::qinvgamma(logp, shape, scale = rate, log.p = TRUE)
logp_rate_qb = qinvgamma(logp, shape, rate = rate, log.p = TRUE)
logp_scale_qa = invgamma::qinvgamma(logp, shape, rate = scale, log.p = TRUE)
logp_scale_qb = qinvgamma(logp, shape, scale = scale, log.p = TRUE)
ut_rate_qa = invgamma::qinvgamma(p, shape, scale = rate, lower.tail = FALSE)
ut_rate_qb = qinvgamma(p, shape, rate = rate, lower.tail = FALSE)
ut_scale_qa = invgamma::qinvgamma(p, shape, rate = scale, lower.tail = FALSE)
ut_scale_qb = qinvgamma(p, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_qa = invgamma::qinvgamma(logp, shape, scale = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_qb = qinvgamma(logp, shape, rate = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qa = invgamma::qinvgamma(logp, shape, rate = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_qb = qinvgamma(logp, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("qinvgamma is correct", {
expect_equal(rate_qa, rate_qb)
expect_equal(scale_qa, scale_qb)
expect_equal(logp_rate_qa, logp_rate_qb)
expect_equal(logp_scale_qa, logp_scale_qb)
expect_equal(ut_rate_qa, ut_rate_qb)
expect_equal(ut_scale_qa, ut_scale_qb)
expect_equal(ut_logp_rate_qa, ut_logp_rate_qb)
expect_equal(ut_logp_scale_qa, ut_logp_scale_qb)
})
## test pinvgamma
rate_pa = invgamma::pinvgamma(x, shape, scale = rate)
rate_pb = pinvgamma(x, shape, rate = rate)
scale_pa = invgamma::pinvgamma(x, shape, rate = scale)
scale_pb = pinvgamma(x, shape, scale = scale)
logp_rate_pa = invgamma::pinvgamma(x, shape, scale = rate, log.p = TRUE)
logp_rate_pb = pinvgamma(x, shape, rate = rate, log.p = TRUE)
logp_scale_pa = invgamma::pinvgamma(x, shape, rate = scale, log.p = TRUE)
logp_scale_pb = pinvgamma(x, shape, scale = scale, log.p = TRUE)
ut_rate_pa = invgamma::pinvgamma(x, shape, scale = rate, lower.tail = FALSE)
ut_rate_pb = pinvgamma(x, shape, rate = rate, lower.tail = FALSE)
ut_scale_pa = invgamma::pinvgamma(x, shape, rate = scale, lower.tail = FALSE)
ut_scale_pb = pinvgamma(x, shape, scale = scale, lower.tail = FALSE)
ut_logp_rate_pa = invgamma::pinvgamma(x, shape, scale = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_rate_pb = pinvgamma(x, shape, rate = rate, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_pa = invgamma::pinvgamma(x, shape, rate = scale, lower.tail = FALSE, log.p = TRUE)
ut_logp_scale_pb = pinvgamma(x, shape, scale = scale, lower.tail = FALSE, log.p = TRUE)
test_that("pinvgamma is correct", {
expect_equal(rate_pa, rate_pb)
expect_equal(scale_pa, scale_pb)
expect_equal(logp_rate_pa, logp_rate_pb)
expect_equal(logp_scale_pa, logp_scale_pb)
expect_equal(ut_rate_pa, ut_rate_pb)
expect_equal(ut_scale_pa, ut_scale_pb)
expect_equal(ut_logp_rate_pa, ut_logp_rate_pb)
expect_equal(ut_logp_scale_pa, ut_logp_scale_pb)
})
## test rinvgamma
set.seed(1)
r1 = invgamma::rinvgamma(3, 1.5, scale = 1.5)
set.seed(1)
r2 = rinvgamma(3, 1.5, rate = 1.5)
set.seed(3)
r3 = invgamma::rinvgamma(3, 1.5, rate = 1.5)
set.seed(3)
r4 = rinvgamma(3, 1.5, scale = 1.5)
test_that("rinvgamma is correct", {
expect_equal(r1, r2)
expect_equal(r3, r4)
})
mean(rinvgamma(1000, shape = a, scale = s))
a = 3
s = 10
mean(rinvgamma(1000, shape = a, scale = s))
?rinvgamma
s / (a - 1)
mean(rinvgamma(1000, shape = a, scale = s))
mean(rinvgamma(10000, shape = a, scale = s))
s / (a - 1)
mean(rx)
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
var(rx)
s^2/(a-1)^2/(a-2)
a = 3
s = 10
rx = rinvgamma(100000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/(a-1)^2/(a-2)
s^2/((a-1)^2*(a-2))
var(rx)
nimble::dinvgamma(x, shape, scale = scale)
install.packages("nimble")
install.packages("nimble")
devtools::load_all(".")
?InvGammaDist
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
a = 3
s = 10
rx = rinvgamma(10000, shape = a, scale = s)
mean(rx)
s / (a - 1)
var(rx)
s^2/((a-1)^2*(a-2))
